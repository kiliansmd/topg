import { createClient } from "@supabase/supabase-js"

// Supabase-Client mit dem Service-Key initialisieren
const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL || "", process.env.SUPABASE_SERVICE_KEY || "")

async function setupDatabase() {
  console.log("Starte Einrichtung der Supabase-Datenbank...")

  try {
    // 1. Erstellen der Tabelle für Unternehmenswissen mit Vektorunterstützung
    const { error: createTableError } = await supabase.rpc("create_company_knowledge_table", {})

    if (createTableError) {
      // Wenn die RPC-Funktion nicht existiert, erstellen wir die Tabelle direkt
      console.log("Erstelle Tabelle manuell...")

      // Tabelle für Unternehmenswissen erstellen
      const { error: tableError } = await supabase.query(`
        CREATE TABLE IF NOT EXISTS company_knowledge (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          title TEXT NOT NULL,
          content TEXT NOT NULL,
          metadata JSONB,
          embedding VECTOR(1536),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `)

      if (tableError) {
        throw new Error(`Fehler beim Erstellen der Tabelle: ${tableError.message}`)
      }

      // Index für Vektorsuche erstellen
      const { error: indexError } = await supabase.query(`
        CREATE INDEX IF NOT EXISTS company_knowledge_embedding_idx 
        ON company_knowledge 
        USING ivfflat (embedding vector_cosine_ops)
        WITH (lists = 100);
      `)

      if (indexError) {
        throw new Error(`Fehler beim Erstellen des Index: ${indexError.message}`)
      }
    }

    // 2. Funktion für Vektorsuche erstellen
    const { error: functionError } = await supabase.query(`
      CREATE OR REPLACE FUNCTION match_documents(
        query_embedding VECTOR(1536),
        match_threshold FLOAT DEFAULT 0.7,
        match_count INT DEFAULT 5
      )
      RETURNS TABLE (
        id BIGINT,
        title TEXT,
        content TEXT,
        metadata JSONB,
        similarity FLOAT
      )
      LANGUAGE plpgsql
      AS $$
      BEGIN
        RETURN QUERY
        SELECT
          company_knowledge.id,
          company_knowledge.title,
          company_knowledge.content,
          company_knowledge.metadata,
          1 - (company_knowledge.embedding <=> query_embedding) AS similarity
        FROM company_knowledge
        WHERE 1 - (company_knowledge.embedding <=> query_embedding) > match_threshold
        ORDER BY similarity DESC
        LIMIT match_count;
      END;
      $$;
    `)

    if (functionError) {
      throw new Error(`Fehler beim Erstellen der Suchfunktion: ${functionError.message}`)
    }

    console.log("Datenbank-Setup erfolgreich abgeschlossen!")
  } catch (error) {
    console.error("Fehler beim Einrichten der Datenbank:", error)
  }
}

// Funktion ausführen
setupDatabase()
